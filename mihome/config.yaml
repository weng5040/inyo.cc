# 延迟检测 URL
providers: &p-url-test
  type: http
  # 自动更新订阅时间，单位为秒
  interval: 4620 #77分钟更新一次
  health-check:
    enable: true
    url: https://www.gstatic.com/generate_204
    # 节点连通性检测时间，单位为秒
    interval: 300
    # 节点超时延迟，单位为毫秒
    timeout: 1000
    # 节点自动切换差值，单位为毫秒
    tolerance: 100
  proxy: DIRECT

proxy-providers:
  ENET:
    <<: *p-url-test
    url: "https://118.193.44.164/api/v1/client/subscribe?token=6d81214ffd2e2c980bd19f26d4c4f01b"
  suying666:
    <<: *p-url-test
    url: "https://s.suying666.info/link/457J3ZdiT4Rc4Yeb?sub=3"



unified-delay: true  # 启用统一延迟，优化不同协议间的延迟处理
tcp-concurrent: true  # 允许 TCP 连接的并发处理，提高连接效率
global-client-fingerprint: chrome  # 设置全局客户端指纹为 Chrome，模拟浏览器身份

sniffer:  # 流量嗅探配置
  enable: true  # 启用流量嗅探
  sniff:  # 定义嗅探的协议和端口
    HTTP:  # HTTP 流量嗅探配置
      ports: [80, 8080-8880]  # 嗅探这些端口上的 HTTP 流量
      override-destination: true  # 在嗅探时覆盖目标地址进行处理
    TLS:  # TLS 流量嗅探配置
      ports: [443, 8443]  # 嗅探这些端口上的 TLS 流量
    QUIC:  # QUIC 流量嗅探配置
      ports: [443, 8443]  # 嗅探这些端口上的 QUIC 流量
  skip-domain:  # 列出不进行嗅探的域名
    - "Mijia Cloud"  # 不嗅探该域名的流量
    - "dlg.io.mi.com"  # 不嗅探该域名的流量
    - "+.push.apple.com"  # 不嗅探以 .push.apple.com 结尾的流量
    - "+.apple.com"  # 不嗅探以 .apple.com 结尾的流量

proxies:
- name: HongKong-vless #香港轻量服务器
  type: vless
  server: tj.inyo.cc # 解析的域名或IP
  port: 443 # 自定义端口
  uuid: c9b71b9e-cb10-45f9-906a-19ed1708fb6b # 自定义 UUID
  network: tcp
  udp: true
  tls: true
  flow: xtls-rprx-vision
  servername: tj.inyo.cc # 自定义回落域名


#proxy-groups锚点
proxy-groups-selector: &g-selector {type: select, proxies: [🔀 Selector, ♻️ Auto, 🇭🇰 HongKong🔄, 🇸🇬 Singapore🔄, 🇹🇼 Taiwan🔄, 🇯🇵 Japan🔄, 🇺🇸 USA🔄, 🇭🇰 HongKong, 🇸🇬 Singapore, 🇹🇼 Taiwan, 🇯🇵 Japan, 🇺🇸 USA, 🇰🇷 Korea, 🇲🇾 Malaysia, 🇵🇭 Philippines, 🇦🇺 Australia, DIRECT]}
proxy-groups-option: &g-option {type: select, proxies: [🚀 Option, 🔀 Selector, ♻️ Auto, 🇭🇰 HongKong, 🇸🇬 Singapore, 🇺🇸 USA, DIRECT]}
proxy-groups-url-test: &g-url-test {type: url-test, include-all: true,tolerance: 20, interval: 300, url: 'https://www.gstatic.com/generate_204'}
proxy-groups-load-balance: &g-load-balance {type: load-balance, include-all: true, tolerance: 20, interval: 300, url: 'https://www.gstatic.com/generate_204', lazy: true, strategy: consistent-hashing}

proxy-groups:
  - {name: 🚀 Option, <<: *g-selector }
  - {name: 🔀 Selector, type: select, include-all: true }
  - {name: ♻️ Auto, <<: *g-url-test }

  - {name: 🤖 Ai, type: select, proxies: [🇸🇬 Singapore🔄, 🇹🇼 Taiwan🔄, 🇯🇵 Japan🔄, 🇺🇸 USA🔄 ] }
  - {name: 🐳 Docker, <<: *g-option }
  - {name: 🎮 Game, <<: *g-option }
  - {name: 💶 PayPal, <<: *g-option }
  - {name: ☁️ OneDrive, <<: *g-option }
  - {name: 🪟 Microsoft, <<: *g-option }
  - {name: 🍎 Apple, <<: *g-option }
  - {name: 🎵 TikTok, <<: *g-option }
  - {name: 🎥 NETFLIX, type: select, proxies: [🎥 Netflix] }
  - {name: ⚡️ Speedtest, <<: *g-option }
  - {name: 🔒 Great Firewall, <<: *g-option }
  - {name: 🌍 Geolocation-!cn, <<: *g-option }
  - {name: 👤 CoolMe_Direct, <<: *g-option }
  - {name: 👤 CoolMe_Proxy, <<: *g-option }

  - {name: 🇭🇰 HongKong, <<: *g-url-test, filter: "(?i)(?=.*(港|hk|hong))^((?!(台|日|韩|新|深|美|ipcl|game|hw)).)*$"}
  - {name: 🇭🇰 HongKong🔄, <<: *g-load-balance, filter: "(?i)(?=.*(港|hk|hong))^((?!(台|日|韩|新|深|美|ipcl|game|hw)).)*$"}
  - {name: 🇸🇬 Singapore, <<: *g-url-test, filter: "(?i)(?=.*(新加坡|sg|singapore))^((?!(港|台|日|韩|深|美|ipcl|game|hw)).)*$"}
  - {name: 🇸🇬 Singapore🔄, <<: *g-load-balance, filter: "(?i)(?=.*(新加坡|sg|singapore))^((?!(港|台|日|韩|深|美|ipcl|game|hw)).)*$"}
  - {name: 🇹🇼 Taiwan, <<: *g-url-test, filter: "(?i)(?=.*(台湾|tw|taiwan))^((?!(港|新加坡|韩|深|美|ipcl|game|hw)).)*$"}
  - {name: 🇹🇼 Taiwan🔄, <<: *g-load-balance, filter: "(?i)(?=.*(台湾|tw|taiwan))^((?!(港|新加坡|韩|深|美|ipcl|game|hw)).)*$"}
  - {name: 🇯🇵 Japan, <<: *g-url-test, filter: "(?i)(?=.*(日本|jp|japan))^((?!(港|新加坡|台|韩|深|美|ipcl|game|hw)).)*$"}
  - {name: 🇯🇵 Japan🔄, <<: *g-load-balance, filter: "(?i)(?=.*(日本|jp|japan))^((?!(港|新加坡|台|韩|深|美|ipcl|game|hw)).)*$"}
  - {name: 🇺🇸 USA, <<: *g-url-test, filter: "(?i)(?=.*(美|us|usa))^((?!(港|新加坡|台|韩|日|深|ipcl|game|hw)).)*$"}
  - {name: 🇺🇸 USA🔄, <<: *g-load-balance, filter: "(?i)(?=.*(美|us|usa))^((?!(港|新加坡|台|韩|日|深|ipcl|game|hw)).)*$"}
  - {name: 🇰🇷 Korea, <<: *g-url-test, filter: "(?i)(?=.*(韩|kr|korea))^((?!(港|新加坡|台|深|美|ipcl|game|hw)).)*$"}
  - {name: 🇲🇾 Malaysia, <<: *g-url-test, filter: "(?i)(?=.*(马|my|malaysia))^((?!(港|新加坡|台|韩|日|深|美|ipcl|game|hw)).)*$"}
  - {name: 🇵🇭 Philippines, <<: *g-url-test, filter: "(?i)(?=.*(菲|ph|philippines))^((?!(港|新加坡|台|韩|日|深|美|ipcl|game|hw)).)*$"}
  - {name: 🇦🇺 Australia, <<: *g-url-test, filter: "(?i)(?=.*(澳|au|australia))^((?!(港|新加坡|台|韩|日|深|美|ipcl|game|hw)).)*$"}
  - {name: 🎥 Netflix, <<: *g-url-test, filter: "(NF|Netflix|解锁|(?i)Netflix|Media)"}

  - {name: 🔗 Direct, type: select, proxies: [DIRECT, 🚀 Option]}
  - {name: 🧊 Lost, type: select, proxies: [DIRECT, 🚀 Option]}

  #负载均衡规则
  - name: "🔄 load-balance"
    type: load-balance
    include-all: true
    url: 'https://www.gstatic.com/generate_204'
    interval: 300
    lazy: true
    strategy: consistent-hashing # or round-robin


rules:
  - RULE-SET, CoolMe_Direct, 👤 CoolMe_Direct
  - RULE-SET, CoolMe_Proxy, 👤 CoolMe_Proxy
  - RULE-SET, Private_IP, 🔗 Direct, no-resolve
  - RULE-SET, Private_Domain, 🔗 Direct
  - RULE-SET, Ai, 🤖 Ai
  - RULE-SET, Docker_Domain, 🐳 Docker
  - RULE-SET, YouTube_Domain, 🚀 Option
  - RULE-SET, Steam@cn_Domain, 🔗 Direct
  - RULE-SET, Steam_Domain, 🎮 Game
  - RULE-SET, GitHub_Domain, 🚀 Option
  - RULE-SET, Telegram_IP, 🚀 Option, no-resolve
  - RULE-SET, Telegram_Domain, 🚀 Option
  - RULE-SET, PayPal_Domain, 💶 PayPal
  - RULE-SET, OneDrive_Domain, ☁️ OneDrive
  - RULE-SET, Microsoft_Domain,🪟 Microsoft
  - RULE-SET, Apple@cn_Domain, 🔗 Direct
  - RULE-SET, Apple_Domain, 🍎 Apple
  - RULE-SET, Apple_IP, 🍎 Apple, no-resolve
  - RULE-SET, TikTok_Domain, 🎵 TikTok
  - RULE-SET, Speedtest_Domain, ⚡️ Speedtest
  - RULE-SET, Netflix_IP, 🎥 NETFLIX, no-resolve
  - RULE-SET, Netflix_Domain, 🎥 NETFLIX
  - RULE-SET, Google_ip, 🚀 Option, no-resolve
  - RULE-SET, Google_Domain, 🚀 Option
  - RULE-SET,China_IP, 🔗 Direct, no-resolve
  - RULE-SET,Chian_Domain, 🔗 Direct
  - RULE-SET, Geolocation-!cn, 🌍 Geolocation-!cn
  - RULE-SET, GFW_Domain, 🔒 Great Firewall
  - GEOIP, cn, 🔗 Direct, no-resolve
  - GEOIP, lan, 🔗 Direct, no-resolve
  - GEOSITE, cn, 🔗 Direct
  - MATCH, 🧊 Lost

#rule-providers锚点
rule-providers-coolme: &p-coolme {type: http, interval: 2520, behavior: classical, format: text}
rule-providers-ip: &p-ip {type: http, interval: 25200, behavior: ipcidr, format: mrs}
rule-providers-domain: &p-domain {type: http, interval: 25200, behavior: domain, format: mrs}
qcy: &qcy {type: http, interval: 25200, behavior: domain, format: text}
class: &class {type: http, interval: 25200, behavior: classical, format: text}

rule-providers:
  Ai: { <<: *qcy, url: "https://raw.githubusercontent.com/qcyhub/rule/master/AI.list" }
  free: { <<: *qcy, url: "https://raw.githubusercontent.com/qcyhub/rule/master/Free.list" }
  #CoolMeWeng
  CoolMe_Direct: { <<: *p-coolme, url: "https://raw.githubusercontent.com/weng5040/inyo.cc/refs/heads/main/mihome/Direct_rule.list" }
  CoolMe_Proxy: { <<: *p-coolme, url: "https://raw.githubusercontent.com/weng5040/inyo.cc/refs/heads/main/mihome/Proxy_rule.list" }
  #私有IP&域名
  Private_IP: { <<: *p-ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/private.mrs" }
  Private_Domain: { <<: *p-domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs" }
  #YouTube域名
  YouTube_Domain: { <<: *p-domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs" }
  #Steam@cn域名&Steam域名
  Steam@cn_Domain: { <<: *p-domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/steam@cn.mrs" }
  Steam_Domain: { <<: *p-domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/steam.mrs" }
  #GitHub域名
  GitHub_Domain: { <<: *p-domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs" }
  #TelegramIP&域名
  Telegram_IP: { <<: *p-ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs" }
  Telegram_Domain: { <<: *p-domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs" }
  #PayPal域名
  PayPal_Domain: { <<: *p-domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs" }
  #OneDrive域名
  OneDrive_Domain: { <<: *p-domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs" }
  #Microsoft域名
  Microsoft_Domain: { <<: *p-domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs" }
  #Apple@cn域名
  Apple@cn_Domain: { <<: *p-domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs" }
  Apple_Domain: { <<: *p-domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple.mrs" }
  Apple_IP: { <<: *p-ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo-lite/geoip/apple.mrs" }
  #Speedtest域名
  Speedtest_Domain: { <<: *p-domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs" }
  #TikTok域名
  TikTok_Domain: { <<: *p-domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs" }
  #(Great Firewall,GFW)防火长城
  GFW_Domain: { <<: *p-domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs" }
  #Geolocation!CN
  Geolocation-!cn: { <<: *p-domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs" }
  #ChianIP&China域名
  China_IP: { <<: *p-ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs" }
  Chian_Domain: { <<: *p-domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs" }
  #NetflixIP&域名
  Netflix_IP: { <<: *p-ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs" }
  Netflix_Domain: { <<: *p-domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs" }
  #GoogleIP&域名
  Google_ip: { <<: *p-ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs" }
  Google_Domain: { <<: *p-domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs" }
  #Docker域名
  Docker_Domain: { <<: *p-domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/docker.mrs" }

# https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs
  
# https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs